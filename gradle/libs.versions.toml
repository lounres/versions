[versions]
kotlin = "2.2.20-Beta1"
android = "8.0.0"
ksp = "2.2.0-2.0.2"

kotlinx-atomicfu = "0.29.0"
kotlinx-coroutines = "1.10.2"
kotlinx-serialization = "1.9.0"
kotlinx-datetime = "0.7.1"
kotlinx-kover = "0.9.1"
kotlinx-benchmark = "0.4.14"
kotlinx-lincheck = "3.0"
kotlinx-binary-compatibility-validator = "0.18.1"
kotlinx-knit = "0.4.0"

kone = "0.0.0-experiment-2025.7.4.10"
kmath = "0.4.2"
compose-multiplatform = "1.9.0-alpha03"
compose-multiplatform-hot-reload = "1.0.0-alpha10"
kotlin-wrappers = "2025.7.2"
komponentual = "0.1.0"
essenty = "2.5.0"
decompose = "3.3.0"
kaml = "0.59.0"
tomlkt = "0.4.0"
logKube = "0.2.0"
logback =  "1.5.6"
ktor = "3.2.1"
koin = "3.5.6"
kord = "0.15.0"
kotest = "5.9.1"
jmh = "1.37"
dokka = "2.0.0"
changelog = "2.2.1"

gradle-maven-publish-plugin = "0.31.0"
gradle-plugin-publish = "1.3.0"

[plugins]
# Kotlin plugins
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }

# Android
android-application = { id = "com.android.application", version.ref = "android" }
android-library = { id = "com.android.library", version.ref = "android" }

# Kotlin side plugins
kotlin-allopen = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }

# KSP
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }

# kotlinx plugins
kotlinx-atomicfu = { id = "org.jetbrains.kotlinx.atomicfu", version.ref = "kotlinx-atomicfu" }
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlinx-kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kotlinx-kover" }
kotlinx-benchmark = { id = "org.jetbrains.kotlinx.benchmark", version.ref = "kotlinx-benchmark" }
kotlinx-binary-compatibility-validator = { id = "org.jetbrains.kotlinx.binary-compatibility-validator", version.ref = "kotlinx-binary-compatibility-validator" }
kotlinx-knit = { id = "org.jetbrains.kotlinx:kotlinx-knit", version.ref = "kotlinx-knit" }

# Extra
compose-multiplatform = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }
compose-multiplatform-hot-reload = { id = "org.jetbrains.compose.hot-reload", version.ref = "compose-multiplatform-hot-reload" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
kotest-multiplatform = { id = "io.kotest.multiplatform", version.ref = "kotest" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
changelog = { id = "org.jetbrains.changelog", version.ref = "changelog" }

# Publishing
gradle-maven-publish-plugin = { id = "com.vanniktech.maven.publish", version.ref = "gradle-maven-publish-plugin" }
gradle-plugin-publish = { id = "com.gradle.plugin-publish", version.ref = "gradle-plugin-publish"}

[libraries]
# kotlinx.coroutines
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-debug = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }

# kotlinx.serialization
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }

# kotlinx.datetime
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }

# kotlinx.benchmark
kotlinx-benchmark-runtime = { module = "org.jetbrains.kotlinx:kotlinx-benchmark-runtime", version.ref = "kotlinx-benchmark" }

# kotlinx.lincheck
kotlinx-lincheck = { module = "org.jetbrains.kotlinx:lincheck", version.ref = "kotlinx-lincheck" }

# Essenty
essenty-lifecycle-coroutines = { module = "com.arkivanov.essenty:lifecycle-coroutines", version.ref = "essenty" }

# Decompose
decompose = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-extensions-compose-multiplatform = { module = "com.arkivanov.decompose:extensions-compose", version.ref = "decompose" }

# logback
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# Ktor
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-serialization-kotlinx-protobuf = { module = "io.ktor:ktor-serialization-kotlinx-protobuf", version.ref = "ktor" }

# Koin
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }

# Kord
kord-core = { module = "dev.kord:kord-core", version.ref = "kord" }

# Kotest
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-framework-engine = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
kotest-framework-datatest = { module = "io.kotest:kotest-framework-datatest", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }

# Dokka
dokka-base = { module = "org.jetbrains.dokka:dokka-base", version.ref = "dokka" }
dokka-mathjax = { module = "org.jetbrains.dokka:mathjax-plugin", version.ref = "dokka" }

# KMath
kmath-core = { module = "space.kscience:kmath-core", version.ref = "kmath" }

# Kaml
kaml = { module = "com.charleskorn.kaml:kaml", version.ref = "kaml" }

# tomlkt
tomlkt = { module = "net.peanuuutz.tomlkt:tomlkt", version.ref = "tomlkt" }